"""
==================================================
Script Name: processffmodelresults.py
==================================================

Code Description:
-----------------
This is the code for the analysis of the results
generated by the feedforward model. Specifically,
the RF tilt is calculated for multiple LM neurons
over all 3 groups and statistically compared across
the groups. 

Developers:
-----------
- Nikos Malakasis (nikos.malakasis@tum.de)
- Xinyun Zhang (xy.zhang@tum.de)

Inputs:
--------
- "trials" / "-T" -> <number of trials>: Select the amount of simulations to run. Type = integer.
- "seed" / "-S" -> <seed number>: Set the seed to control randomness. Type = integer.
- "folder" / "-F" -> "generated" or "provided" or "provided_new". (The last one is to test the RFs 
generated by the "provided" option in the "generateffRF.py" code file.)

Input files:
------------
-"trial<k>_rf.npy" -> The receptive field of the each neuron after the simulation.

Outputs:
--------
-"LM_FFRF_angle_comparison_for_<trials>_trials.png" -> Boxplots for the RF tilt of 
all three groups, statistically compared.

Dependencies:
-------------
numpy, matplotlib, seaborn, pandas, scipy, starbars, opencv(cv2)

Usage:
------
python processffmodelresults.py -T <trials> -S <seed> -F <folder>

==================================================
"""

import numpy as np
import matplotlib.pyplot as plt

import seaborn as sns
import pandas as pd
from scipy import stats
from argparse import ArgumentParser

import starbars
import cv2

parser=ArgumentParser()
parser.add_argument('-T','--trials',type=int)
parser.add_argument('-S','--seed',type=int)
parser.add_argument('-F','--folder',type=str)

args = vars(parser.parse_args())

allseed=args["seed"]
np.random.seed(allseed)

if args["folder"]=="generated":
  file_oh_GR45_load = '../generated_model_outputs/FF_model_outputs/GR45/' 
  file_oh_GR45_save = '../generated_model_outputs/FF_model_outputs/GR45/' 
  file_oh_CTRL_load = '../generated_model_outputs/FF_model_outputs/CTRL/' 
  file_oh_CTRL_save = '../generated_model_outputs/FF_model_outputs/CTRL/' 
  file_oh_GR135_load = '../generated_model_outputs/FF_model_outputs/GR135/' 
  file_oh_GR135_save = '../generated_model_outputs/FF_model_outputs/GR135/' 
  file_oh_save = '../generated_model_outputs/FF_model_outputs/'

if args["folder"]=="provided":
  file_oh_GR45_load = '../provided_model_outputs/FF_model_outputs/feedforward_results/GR45/' 
  file_oh_GR45_save = '../provided_model_outputs/FF_model_outputs/new_outputs/GR45/' 
  file_oh_CTRL_load = '../provided_model_outputs/FF_model_outputs/feedforward_results/CTRL/' 
  file_oh_CTRL_save = '../provided_model_outputs/FF_model_outputs/new_outputs/CTRL/' 
  file_oh_GR135_load = '../provided_model_outputs/FF_model_outputs/feedforward_results/GR135/' 
  file_oh_GR135_save = '../provided_model_outputs/FF_model_outputs/new_outputs/GR135/' 
  file_oh_save = '../provided_model_outputs/FF_model_outputs/new_outputs/'

if args["folder"]=="provided_new":
  file_oh_GR45_load = '../provided_model_outputs/FF_model_outputs/new_outputs/GR45/' 
  file_oh_GR45_save = '../provided_model_outputs/FF_model_outputs/new_outputs/GR45/' 
  file_oh_CTRL_load = '../provided_model_outputs/FF_model_outputs/new_outputs/CTRL/' 
  file_oh_CTRL_save = '../provided_model_outputs/FF_model_outputs/new_outputs/CTRL/' 
  file_oh_GR135_load = '../provided_model_outputs/FF_model_outputs/new_outputs/GR135/' 
  file_oh_GR135_save = '../provided_model_outputs/FF_model_outputs/new_outputs/GR135/' 
  file_oh_save = '../provided_model_outputs/FF_model_outputs/new_outputs/from_new/'


rf_tilt_GR45 = []
rf_tilt_CTRL = []
rf_tilt_GR135 = []

num_trials = args["trials"]

########## Category: Group GR45 ##########

plt.figure(figsize=(15,7))
RF_avg = np.zeros((30,30))

for i in range(num_trials):
  rf_map_bias = np.load(file_oh_GR45_load + 'trial' + str(i) + '_rf.npy')
  RF_avg += rf_map_bias
  rf_center = np.where(rf_map_bias==np.max(rf_map_bias))[0][0], np.where(rf_map_bias==np.max(rf_map_bias))[1][0]
  rf_th = 0.1*np.max(rf_map_bias)
  diag1 = np.diagonal(rf_map_bias, offset = rf_center[1] - rf_center[0])
  wid1 = np.sum(1*(diag1 > rf_th))
  rf_map_bias_flip = np.flip(rf_map_bias, axis = 0)
  rf_flip_center = np.where(rf_map_bias_flip==np.max(rf_map_bias_flip))[0][0], np.where(rf_map_bias_flip==np.max(rf_map_bias_flip))[1][0]
  diag2 = np.diagonal(rf_map_bias_flip, offset = rf_flip_center[1] - rf_flip_center[0])
  wid2 = np.sum(1*(diag2 > rf_th))
  # clip the RF outline
  rf_map = rf_map_bias
  rf_map = rf_map>2*rf_th

  img = np.zeros([30,30,3], dtype=np.uint8)
  img[:,:,0] = rf_map*64
  img[:,:,1] = rf_map*128
  img[:,:,2] = rf_map*192
  cv2.imwrite('color_img.jpg', img)
  img = cv2.imread('color_img.jpg')
  gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

  th, threshed = cv2.threshold(gray, 100, 255, cv2.THRESH_BINARY)

  cnts, hiers = cv2.findContours(threshed, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)[-2:]
  for cnt in cnts:
    ellipse = cv2.fitEllipse(cnt)
    cv2.ellipse(img, ellipse, (255,0, 255), 1, cv2.LINE_AA)
  rf_tilt_GR45.append(ellipse[2]-90)

RF_avg = RF_avg/num_trials

########## Category: Group CTRL ##########

plt.figure(figsize=(15,7))
RF_avg = np.zeros((30,30))

for i in range(num_trials):
  rf_map_bias = np.load(file_oh_CTRL_load+ 'trial' + str(i) + '_rf.npy')
  RF_avg += rf_map_bias
  rf_center = np.where(rf_map_bias==np.max(rf_map_bias))[0][0], np.where(rf_map_bias==np.max(rf_map_bias))[1][0]
  rf_th = 0.1*np.max(rf_map_bias)
  diag1 = np.diagonal(rf_map_bias, offset = rf_center[1] - rf_center[0])
  wid1 = np.sum(1*(diag1 > rf_th))
  rf_map_bias_flip = np.flip(rf_map_bias, axis = 0)
  rf_flip_center = np.where(rf_map_bias_flip==np.max(rf_map_bias_flip))[0][0], np.where(rf_map_bias_flip==np.max(rf_map_bias_flip))[1][0]
  diag2 = np.diagonal(rf_map_bias_flip, offset = rf_flip_center[1] - rf_flip_center[0])
  wid2 = np.sum(1*(diag2 > rf_th))
  # clip the RF outline
  rf_map = rf_map_bias
  rf_map = rf_map>2*rf_th

  img = np.zeros([30,30,3], dtype=np.uint8)
  img[:,:,0] = rf_map*64
  img[:,:,1] = rf_map*128
  img[:,:,2] = rf_map*192
  cv2.imwrite('color_img.jpg', img)
  img = cv2.imread('color_img.jpg')
  gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

  th, threshed = cv2.threshold(gray, 100, 255, cv2.THRESH_BINARY)

  cnts, hiers = cv2.findContours(threshed, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)[-2:]
  for cnt in cnts:
    ellipse = cv2.fitEllipse(cnt)
    cv2.ellipse(img, ellipse, (255,0, 255), 1, cv2.LINE_AA)
  rf_tilt_CTRL.append(ellipse[2]-90)

RF_avg = RF_avg/num_trials


########## Category: Group GR135 ##########

plt.figure(figsize=(15,7))
RF_avg = np.zeros((30,30))

for i in range(num_trials):
  rf_map_bias = np.load(file_oh_GR135_load + 'trial' + str(i) + '_rf.npy')
  RF_avg += rf_map_bias
  rf_center = np.where(rf_map_bias==np.max(rf_map_bias))[0][0], np.where(rf_map_bias==np.max(rf_map_bias))[1][0]
  rf_th = 0.1*np.max(rf_map_bias)
  diag1 = np.diagonal(rf_map_bias, offset = rf_center[1] - rf_center[0])
  wid1 = np.sum(1*(diag1 > rf_th))
  rf_map_bias_flip = np.flip(rf_map_bias, axis = 0)
  rf_flip_center = np.where(rf_map_bias_flip==np.max(rf_map_bias_flip))[0][0], np.where(rf_map_bias_flip==np.max(rf_map_bias_flip))[1][0]
  diag2 = np.diagonal(rf_map_bias_flip, offset = rf_flip_center[1] - rf_flip_center[0])
  wid2 = np.sum(1*(diag2 > rf_th))
  # clip the RF outline
  rf_map = rf_map_bias
  rf_map = rf_map>2*rf_th

  img = np.zeros([30,30,3], dtype=np.uint8)
  img[:,:,0] = rf_map*64
  img[:,:,1] = rf_map*128
  img[:,:,2] = rf_map*192
  cv2.imwrite('color_img.jpg', img)
  img = cv2.imread('color_img.jpg')
  gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

  th, threshed = cv2.threshold(gray, 100, 255, cv2.THRESH_BINARY)

  cnts, hiers = cv2.findContours(threshed, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)[-2:]
  for cnt in cnts:
    ellipse = cv2.fitEllipse(cnt)
    cv2.ellipse(img, ellipse, (255,0, 255), 1, cv2.LINE_AA)
  rf_tilt_GR135.append(ellipse[2]-90)


RF_avg = RF_avg/num_trials

############################################################################
# Generate box plot to show statistics on tilt angle for all groups
############################################################################

rf_tilt = rf_tilt_GR45 + rf_tilt_CTRL + rf_tilt_GR135
groups = ['GR45'] * num_trials + ['CTRL'] * num_trials + ['GR135'] * num_trials
rf_tilt_dataset = {'Group': groups, 'LM RF Angle (deg)': rf_tilt}
df = pd.DataFrame(rf_tilt_dataset)

t_stat_GR45_GR135, p_val_GR45_GR135 = stats.ttest_ind(rf_tilt_GR45, rf_tilt_GR135, equal_var=False)
t_stat_CTRL_GR135, p_val_CTRL_GR135 = stats.ttest_ind(rf_tilt_GR135, rf_tilt_CTRL, equal_var=False)
t_stat_CTRL_GR45, p_val_CTRL_GR45 = stats.ttest_ind(rf_tilt_GR45, rf_tilt_CTRL, equal_var=False)

custom_palette = ["darkviolet", "sienna", "deeppink"]
plt.figure()
g = sns.stripplot(data=df, x="Group", y="LM RF Angle (deg)", alpha=.5, legend=False, hue = 'Group', palette = custom_palette, jitter=False)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)

annotations = [("GR45", "CTRL", p_val_CTRL_GR45), ("GR135", "CTRL", p_val_CTRL_GR135)]
starbars.draw_annotation(annotations)
annotations = [("GR45", "GR135", p_val_GR45_GR135)]
starbars.draw_annotation(annotations)

ax = g.axes
ax.set_ylabel('LM\n Circular mean RF angle (deg)')
ax.set_xlabel('')
ax.tick_params(axis='x', rotation=0, length=0)
sns.pointplot(data=df, x="Group", y="LM RF Angle (deg)", estimator=np.mean, linestyle='none', errorbar=None, marker="_", markersize=20, markeredgewidth=3, hue = 'Group', palette = custom_palette)
sns.despine(right=True, top=True)
plt.ylim([-60,60])
sns.boxplot(data=df, x="Group", y="LM RF Angle (deg)", legend=False, hue = 'Group', palette = custom_palette, width=0.4, linewidth=1.5)

sp = 0
ax.axhline(y=sp, color='gray', linestyle='--', label='Horizontal')
ax.legend(frameon=False, loc="lower right")
plt.savefig(file_oh_save + 'LM_FFRF_angle_comparison_for_'+str(num_trials)+'_trials.png', format='png', dpi=200)
plt.tight_layout()
